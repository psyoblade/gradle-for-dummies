// Apply the java plugin to add support for Java
apply plugin: 'java'

// version = 0.1
sourceCompatibility = 1.7

setDescription("my first gradle proejct")

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.25'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task helloWorld {
    doLast { // << shiftLeft is deprecated so use doLast instead.
        println 'hello world'
        chant()
    }
}

def chant() { // method
    ant.echo(message: 'repeat after me')
}

5.times {
    task "task$it" << {
        println "run task $it times"
    }
}

// 아래와 같이 설정하여도 종속성에 대한 순서만 보장하며, stack 형태로 함수 호출을 하는 것으로 보인다.
task1.dependsOn helloWorld
task4.dependsOn task1
task3.dependsOn task0
task2.dependsOn task3, task4
task dependTask(dependsOn: task2)

task foo() << {
    println 'foo task called'
}

task printGradleCommands << {
    [ "gradle helloWorld"
    , "gradle -q dependTask"
    , "gradle -q tasks --all"
    , "gradle task_1"
    , "gradle hW"
    , "gradle t1"
    , "gradle t2"
    , "gradle -q t2 -x t1"
    , "gradle -b build.gradle --offline"
    , "gradle -i -s helloworld"
    , "gradle --daemon"
    , "gradle --stop"
    , "gradle properties"
    , "gradle printProperties -Pxxx=yyy"
    , "gradle printProperties -Ddescription=other_discription"
    ].each { println it }
}

jar {
	manifest {
		attributes 'Main-Class': 'com.ncsoft.dataplatform.psyoblade.HelloWorld'
	}
}

task printDescription << {
    println "description of this project $name: " + project.description
}


// Initialize my own extra properties - 처음 선언 시에는 반드시 namespace 가 필요하지만
project.ext.props = 'my own properties'
ext {
    userName = 'park suhyuk'
    userId = 'psyoblade'
}

// 사용 시에는 그대로 사용할 수 있다 
task printProperties << {
    println "name is $userName, id is $userId, -Pxxx $xxx"
}


/**
 * 4.2. Working with tasks
 *  SNAPSHOT designator to indicate that the built project artifact is in the state of development.
 *  ProjectVersion (major: String, minor: String, release: Boolean)
 */

task printVersion {
    group = 'versioning'
    description = 'print project version'
    doFirst {
        println "before reading the project version"
    }
    doLast {
        logger.quiet "Version: $version"
    }
}
// 위의 doFrist 를 제외한 나머지는 아래의 task와 동일하다.
task printVersion2(group: 'versioning', description: 'print current version') << {
    logger.quiet "Version: $version"
}
// gradle tasks 명령어를 통해서 현재 group, description 정보를 확인할 수 있다.
// 같은 그룹명을 가진 task 들은 같이 출력된다.

/**
 * Task dependencies
 */

task b_first << { println "first" }
task a_second << { println "seconds" }
task printVersion3 (dependsOn: [ b_first, a_second ] ) << { logger.quiet "version: $version" }
// 위 dependsOn list 내의 task 호출 순서는 순서대로가 아니다.
// In Gradle, the task execution order is not deterministic. - 영문 순서처럼 보이지만 그것도 아닌 것 같다.
task x_third << { println "third" }
x_third.dependsOn('printVersion3')

// 위의 순서에 대한 명시적인 구분은 finalizedBy 구문을 통해서 수행할 수 있다.
task first << { println "first" }
task second << { println "seconds" }
first.finalizedBy second
task printVersion4 (dependsOn: [ second, first ]) << { logger.quiet "version: $version" }

/**
 * 4.2.6 Adding arbitrary code
 * 그루비에서는 Java POJO 같이 POGO라고 하는데 getter, setter를 명시하지 않아도 자동으로 구성해 준다.
 * 즉, properties 설정만 하면 get\/set 접근이 가능하다.
 */

// version = new ProjectVersion(1, 0, 2)

class ProjectVersion {
    Integer major
    Integer minor
    Integer patch
    Boolean release

    ProjectVersion(Integer major, Integer minor, Integer patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Integer patch, Boolean release) {
        this(major, minor, patch)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor.$patch${release ? '' : '-SNAPSHOT'}"
    }
}

ext.versionFile = file('version.properties')
task loadVersion << {
    project.version = readVersion()
    println "debug version: " + project.version
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'
    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exists: $versionFile.canonicalPath")
    }
    Properties versionProps = new Properties()
    versionFile.withInputStream { stream -> versionProps.load(stream) }
    println versionProps
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.patch.toInteger(), versionProps.release.toBoolean())
}

// version.properties 파일을 열어서 release 버전으로 변경.
task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

task printVersionFinal << {
    project.version = readVersion()
    println "version: $version"
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from jar.outputs.files
    from (sourceSets*.allSource) {
        into 'src'
    }
    from (rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

/**
 * Increment major, minor version
 */

task incrementMajorVersion(group: 'versioning', description: 'Increments project major version.') << {
    String currentVersion = version.toString()
    ++version.major
    String newVersion = version.toString()
    logger.info "Incrementing major project version: $currentVersion -> $newVersion"
    ant.propertyfile(file: versionFile) {
        entry(key: 'major', type: 'int', operation: '+', value: 1)
    }
}

task incrementMinorVersion(group: 'versioning', description: 'Increments project minor version.') << {
    String currentVersion = version.toString()
    ++version.minor
    String newVersion = version.toString()
    logger.info "Incrementing minor project version: $currentVersion -> $newVersion"
    ant.propertyfile(file: versionFile) {
        entry(key: 'minor', type: 'int', operation: '+', value: 1)
    }
}

// gradle incrementMajorVersion -i

/**
 * 5.3 Dependency configurations
 *  The Java plugin already provides six configurations out of the box: 
 *  compile, runtime,testCompile, testRuntime, archives, and default.
 */
// -- gradle dependencies 


configurations {
	cargo {
		description = 'Classpath for Cargo Ant tasks.'
		visible = false
	}
}

task deployToLocalTomcat << {
	FileTree cargoDeps = configurations.getByName('cargo').asFileTree
	ant.taskdef(resource: 'cargo.tasks', classpath: cargoDeps.asPath)
	ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
		configuration {
			deployable(type: 'war', file: 'todo.war')
		}
		zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
	}
}

// DSL을 읽고, 인터페이스를 이용한 인스턴스를 생성하는 것이 Gradle이 build.gradle 파일을 읽는 과정이다.

/**
 * 5.4.2 External module dependencies
 *  Attributes: group, name, version, classifier
 */  
 
ext.cargoGroup = 'org.codehaus.cargo'
ext.cargoVersion = '1.3.1'

dependencies {
	// cargo group: cargoGroup, name: 'cargo-core-uberjar', version: cargoVersion
	cargo("$cargoGroup:cargo-ant:$cargoVersion"){
		exclude group: 'xml-apis', module: 'xml-apis' // 모든 라이브러리를 다 넣고, 문제되는 것 만 빼는 방법과,
		transitive = false // 아예 전이 라이브러리를 추가하지 않고, 필요한 것만 넣는 방법이 있다.
	}
	cargo 'xml-apis:xml-apis:2.0.2'
	cargo 'org.codehaus.cargo:cargo-ant:1.+' // dynamic version declaration -- not recommended !!
	// grdle -q dependencies
} 
 

